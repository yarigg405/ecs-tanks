//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int Destructed = 0;
    public const int SelfDestructTimer = 1;
    public const int View = 2;
    public const int ViewPrefab = 3;
    public const int Active = 4;
    public const int EntityLink = 5;
    public const int Id = 6;
    public const int Rigidbody = 7;
    public const int Transform = 8;
    public const int WorldPosition = 9;
    public const int BaseStats = 10;
    public const int StatChange = 11;
    public const int StatModifiers = 12;
    public const int Cooldown = 13;
    public const int CooldownLeft = 14;
    public const int CooldownUp = 15;
    public const int CurrentHP = 16;
    public const int Dead = 17;
    public const int MaxHP = 18;
    public const int ProcessingDeath = 19;
    public const int Direction = 20;
    public const int MovementAvailable = 21;
    public const int Moving = 22;
    public const int Speed = 23;
    public const int TurnedAlongDirection = 24;
    public const int Player = 25;
    public const int Projectile = 26;
    public const int Shooter = 27;
    public const int ShotRequested = 28;
    public const int TargetLimit = 29;
    public const int Team = 30;
    public const int CollectingTargetsContiniously = 31;
    public const int CollectTargetsInterval = 32;
    public const int CollectTargetsTimer = 33;
    public const int LayerMask = 34;
    public const int ProcessedTargets = 35;
    public const int Radius = 36;
    public const int Reached = 37;
    public const int ReadyToCollectTargets = 38;
    public const int TargetsBuffer = 39;
    public const int AxisInput = 40;
    public const int Input = 41;
    public const int InputEmitted = 42;
    public const int LocalPlayer = 43;
    public const int PlayerRef = 44;

    public const int TotalComponents = 45;

    public static readonly string[] componentNames = {
        "Destructed",
        "SelfDestructTimer",
        "View",
        "ViewPrefab",
        "Active",
        "EntityLink",
        "Id",
        "Rigidbody",
        "Transform",
        "WorldPosition",
        "BaseStats",
        "StatChange",
        "StatModifiers",
        "Cooldown",
        "CooldownLeft",
        "CooldownUp",
        "CurrentHP",
        "Dead",
        "MaxHP",
        "ProcessingDeath",
        "Direction",
        "MovementAvailable",
        "Moving",
        "Speed",
        "TurnedAlongDirection",
        "Player",
        "Projectile",
        "Shooter",
        "ShotRequested",
        "TargetLimit",
        "Team",
        "CollectingTargetsContiniously",
        "CollectTargetsInterval",
        "CollectTargetsTimer",
        "LayerMask",
        "ProcessedTargets",
        "Radius",
        "Reached",
        "ReadyToCollectTargets",
        "TargetsBuffer",
        "AxisInput",
        "Input",
        "InputEmitted",
        "LocalPlayer",
        "PlayerRef"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(Assets.Code.Common.Destructed),
        typeof(Assets.Code.Common.SelfDestructTimer),
        typeof(Assets.Code.Common.View),
        typeof(Assets.Code.Common.ViewPrefab),
        typeof(Assets.Code.Gameplay.Common.Active),
        typeof(Assets.Code.Gameplay.Common.EntityLink),
        typeof(Assets.Code.Gameplay.Common.Id),
        typeof(Assets.Code.Gameplay.Common.RigidbodyComponent),
        typeof(Assets.Code.Gameplay.Common.TransformComponent),
        typeof(Assets.Code.Gameplay.Common.WorldPosition),
        typeof(Assets.Code.Gameplay.Features.CharacterStats.BaseStats),
        typeof(Assets.Code.Gameplay.Features.CharacterStats.StatChange),
        typeof(Assets.Code.Gameplay.Features.CharacterStats.StatModifiers),
        typeof(Assets.Code.Gameplay.Features.Cooldowns.Cooldown),
        typeof(Assets.Code.Gameplay.Features.Cooldowns.CooldownLeft),
        typeof(Assets.Code.Gameplay.Features.Cooldowns.CooldownUp),
        typeof(Assets.Code.Gameplay.Features.LifetimeProcessing.CurrentHP),
        typeof(Assets.Code.Gameplay.Features.LifetimeProcessing.Dead),
        typeof(Assets.Code.Gameplay.Features.LifetimeProcessing.MaxHP),
        typeof(Assets.Code.Gameplay.Features.LifetimeProcessing.ProcessingDeath),
        typeof(Assets.Code.Gameplay.Features.Movement.Direction),
        typeof(Assets.Code.Gameplay.Features.Movement.MovementAvailable),
        typeof(Assets.Code.Gameplay.Features.Movement.Moving),
        typeof(Assets.Code.Gameplay.Features.Movement.Speed),
        typeof(Assets.Code.Gameplay.Features.Movement.TurnedAlongDirection),
        typeof(Assets.Code.Gameplay.Features.Player.Player),
        typeof(Assets.Code.Gameplay.Features.Shooting.Projectile),
        typeof(Assets.Code.Gameplay.Features.Shooting.Shooter),
        typeof(Assets.Code.Gameplay.Features.Shooting.ShotRequested),
        typeof(Assets.Code.Gameplay.Features.Shooting.TargetLimit),
        typeof(Assets.Code.Gameplay.Features.Shooting.TeamComponent),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.CollectingTargetsContiniously),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.CollectTargetsInterval),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.CollectTargetsTimer),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.LayerMask),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.ProcessedTargets),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.Radius),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.Reached),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.ReadyToCollectTargets),
        typeof(Assets.Code.Gameplay.Features.TargetCollection.TargetsBuffer),
        typeof(Assets.Code.Gameplay.Input.AxisInput),
        typeof(Assets.Code.Gameplay.Input.Input),
        typeof(Assets.Code.Gameplay.Input.InputEmitted),
        typeof(Assets.Code.Networking.LocalPlayer),
        typeof(Assets.Code.Networking.PlayerRefComponent)
    };
}
